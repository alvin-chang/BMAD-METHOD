workflow:
  id: api-only
  name: API-First Development
  description: >-
    Workflow for building REST APIs, GraphQL services, or microservices
    without frontend components.
  type: greenfield
  project_types:
    - rest-api
    - graphql-api
    - microservice
    - backend-service
  
  stages:
    - id: api-discovery
      name: API Requirements Discovery
      description: Understand API consumers and requirements
      steps:
        - agent: analyst
          action: API Requirements Analysis
          description: >-
            Analyze API consumers, use cases, and integration requirements
          outputs:
            - api-requirements
            - consumer-analysis
          prompts:
            - "Who will consume this API? Internal services, mobile apps, third parties?"
            - "What are the main operations and data flows?"
            
    - id: api-design
      name: API Product Design
      description: Design API as a product
      steps:
        - agent: pm
          action: API Product Strategy
          description: >-
            Define API product strategy, versioning, and roadmap
          inputs:
            - api-requirements
          outputs:
            - api-product-spec
            - api-roadmap
          prompts:
            - "What's the API versioning strategy?"
            - "How will the API evolve over time?"
            
        - agent: architect
          action: API Architecture Design
          description: >-
            Design RESTful resources, GraphQL schema, or service contracts
          inputs:
            - api-product-spec
          outputs:
            - api-design-doc
            - openapi-spec
            - data-contracts
          prompts:
            - "Let's design the API endpoints and data models"
            - "Define authentication and authorization strategy"
            
    - id: technical-design
      name: Technical Architecture
      description: Design backend architecture and infrastructure
      steps:
        - agent: architect
          action: Backend Architecture
          description: >-
            Design service architecture, database, and integrations
          inputs:
            - api-design-doc
          outputs:
            - backend-architecture
            - database-design
            - integration-architecture
          prompts:
            - "Design the service layer architecture"
            - "What databases and caching strategies?"
            
        - agent: devops
          action: API Infrastructure
          description: >-
            Design API gateway, rate limiting, monitoring, and deployment
          inputs:
            - backend-architecture
          outputs:
            - api-infrastructure
            - monitoring-strategy
            - deployment-plan
          prompts:
            - "Design API gateway and rate limiting"
            - "Define monitoring and alerting strategy"
            
    - id: validation
      name: API Design Validation
      description: Validate API design and documentation
      steps:
        - agent: po
          action: API Design Review
          description: >-
            Review API design for completeness and usability
          inputs:
            - api-design-doc
            - openapi-spec
          outputs:
            - api-validation-report
            - api-documentation
          prompts:
            - "Review API design for developer experience"
            - "Is the API documentation complete?"
            
    - id: development-planning
      name: Implementation Planning
      description: Plan API implementation sprints
      steps:
        - agent: sm
          action: API Development Stories
          description: >-
            Create stories for endpoints, middleware, and infrastructure
          inputs:
            - api-design-doc
            - backend-architecture
          outputs:
            - api-stories
            - implementation-plan
          prompts:
            - "Break down API into implementation stories"
            - "Prioritize endpoints for phased delivery"
            
        - agent: qa
          action: API Test Planning
          description: >-
            Create API testing strategy and automation plan
          inputs:
            - openapi-spec
            - api-stories
          outputs:
            - api-test-strategy
            - contract-tests
            - performance-tests
          prompts:
            - "Design API contract testing approach"
            - "Plan load testing and performance benchmarks"
            
    - id: developer-experience
      name: Developer Experience
      description: Prepare API for developers
      steps:
        - agent: dev
          action: SDK & Documentation Planning
          description: >-
            Plan SDK development and interactive documentation
          inputs:
            - openapi-spec
            - api-documentation
          outputs:
            - sdk-requirements
            - doc-portal-plan
          prompts:
            - "Which language SDKs are needed?"
            - "Plan interactive API documentation"
            
  transitions:
    - from: api-discovery
      to: api-design
      condition: requirements analyzed
    - from: api-design
      to: technical-design
      condition: api spec completed
    - from: technical-design
      to: validation
      condition: architecture completed
    - from: validation
      to: development-planning
      condition: design approved
    - from: development-planning
      to: developer-experience
      condition: stories created
      
  artifacts:
    openapi-spec:
      format: openapi-3.0
      description: Complete API specification
    api-design-doc:
      template: api-design-tmpl
      description: API design decisions and patterns
    contract-tests:
      format: postman-collection
      description: API contract test suite